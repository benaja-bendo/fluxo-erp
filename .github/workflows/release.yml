name: Multi-Platform Release Build

on:
  push:
    tags:
      - 'v*'
#    branches:
#      - main
  workflow_dispatch:

jobs:
  build-windows:
    name: Build Windows MSI
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B clean package

      - name: Install WiX
        run: choco install wixtoolset -y

      - name: Setup JavaFX modules
        run: |
          $env:FX_VERSION="21.0.7"
          # Supprimer le backtick avant l'underscore
          $env:FX_URL="https://download2.gluonhq.com/openjfx/$env:FX_VERSION/openjfx-$env:FX_VERSION_windows-x64_bin-jmods.zip"
          Invoke-WebRequest -Uri $env:FX_URL -OutFile "openjfx.zip"
          Expand-Archive -Path "openjfx.zip" -DestinationPath "."

      - name: Create Windows installer
        run: |
          $JMODS_PATH = Join-Path -Path $PWD -ChildPath "javafx-jmods-21.0.7"
          
          jpackage `
            --input target `
            --name FluxoApp `
            --main-jar Fluxo-0.0.1-SNAPSHOT.jar `
            --type msi `
            --icon src/main/resources/icons/win/icon.ico `
            --module-path "$JMODS_PATH" `
            --add-modules javafx.controls,javafx.fxml `
            --java-options "--add-opens java.base/java.lang=ALL-UNNAMED" `
            --java-options "--add-opens java.base/java.io=ALL-UNNAMED" `
            --win-console `
            --dest installer/win

      - name: Upload MSI Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-Installer
          path: installer/win/*.msi

  build-macos:
    name: Build macOS DMG
    runs-on: macos-latest
    env:
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B clean package

      - name: Setup JavaFX modules
        run: |
          FX_VERSION="21.0.7"
          FX_URL="https://download2.gluonhq.com/openjfx/$FX_VERSION/openjfx-${FX_VERSION}_macos-x64_bin-jmods.zip"
          
          # Téléchargement avec vérification de code de sortie
          if ! curl -L -o openjfx.zip "$FX_URL"; then
            echo "❌ Échec du téléchargement de JavaFX"
            exit 1
          fi
          
          # Vérification taille fichier (au moins 20MB)
          MIN_SIZE=20000000
          ACTUAL_SIZE=$(stat -f%z openjfx.zip)
          if [ $ACTUAL_SIZE -lt $MIN_SIZE ]; then
            echo "❌ Fichier trop petit (${ACTUAL_SIZE} octets), téléchargement corrompu"
            exit 2
          fi
          
          unzip openjfx.zip

      - name: Import certificate and create keychain
        if: env.MACOS_CERTIFICATE != ''
        run: |
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p keychain-password build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p keychain-password build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k keychain-password build.keychain
          IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep "1)" | awk -F '"' '{print $2}')
          echo "MACOS_SIGNING_IDENTITY=$IDENTITY" >> $GITHUB_ENV
          rm certificate.p12

      - name: Create macOS installer
        run: |
          JMODS_PATH="$(pwd)/javafx-jmods-21.0.7"
          
          SIGN_OPTIONS=""
          if [ -n "$MACOS_CERTIFICATE" ]; then
            SIGN_OPTIONS="--mac-sign --mac-signing-key-user-name \"$MACOS_SIGNING_IDENTITY\""
          fi
          
              jpackage \
                --input target \
                --name FluxoApp \
                --main-jar Fluxo-0.0.1-SNAPSHOT.jar \
                --type dmg \
                --icon src/main/resources/icons/mac/icon.icns \
                --module-path "$JMODS_PATH" \
                --add-modules javafx.controls,javafx.fxml,javafx.graphics \
                --java-options "--add-opens java.base/java.lang=ALL-UNNAMED" \
                --java-options "--add-opens java.base/java.io=ALL-UNNAMED" \
                --mac-package-identifier "com.bgrfacile.fluxo" \
                --mac-package-name "FluxoApp" \
                $SIGN_OPTIONS \
                --dest installer/mac

      - name: Upload DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-Installer
          path: installer/mac/*.dmg

  build-linux:
    name: Build Linux DEB
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B clean package

      - name: Setup JavaFX modules
        run: |
          FX_VERSION="21.0.7"
          FX_URL="https://download2.gluonhq.com/openjfx/$FX_VERSION/openjfx-${FX_VERSION}_linux-x64_bin-jmods.zip"
          wget $FX_URL -O openjfx.zip
          unzip openjfx.zip

      - name: Create Linux installer
        run: |
          JMODS_PATH="$(pwd)/javafx-jmods-21.0.7"
          
          jpackage \
            --input target \
            --name FluxoApp \
            --main-jar Fluxo-0.0.1-SNAPSHOT.jar \
            --type deb \
            --icon src/main/resources/icons/linux/icon_512x512x32.png \
            --module-path "$JMODS_PATH" \
            --add-modules javafx.controls,javafx.fxml \
            --java-options "--add-opens java.base/java.lang=ALL-UNNAMED" \
            --java-options "--add-opens java.base/java.io=ALL-UNNAMED" \
            --dest installer/linux

      - name: Upload DEB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux-Installer
          path: installer/linux/*.deb

  create-release:
    name: Create GitHub Release
    needs: [ build-windows, build-macos, build-linux ]
    #    needs: [ build-macos ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: Windows-Installer
          path: installer/windows

      - name: Download macOS Installer
        uses: actions/download-artifact@v4
        with:
          name: macOS-Installer
          path: installer/macos

      - name: Download Linux Installer
        uses: actions/download-artifact@v4
        with:
          name: Linux-Installer
          path: installer/linux

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            installer/windows/*.msi
            installer/macos/*.dmg
            installer/linux/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}